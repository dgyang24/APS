1. 하노이탑 알고리즘 슈도코드
//하노이탑 함수
//접시의 개수 N, 시작지점 start, 보조 기둥 tmp, 목표지점 end를 받는다.
//옮기는 행동은 print구문으로 한다.
public static void hanoi(int n, int start, int tmp, int end){
	//baseCase
	//접시의 개수가 1개(n==1)이면 즉시 목표기동으로 옮기면된다.
	if(n == 1)
		Syetem.out.println(n, start, tmp, end);
	//재귀구문
	//접시의 개수가 1이 아닌 경우 다음과 같은 규칙을 따른다.
	else{
	//n-1개의 접시를 보조기둥으로 옮긴다.
		hanoi(n-1, start, end, tmp);
	//남은 1개의 가장 큰 접시를 목표기둥으로 옮긴다.
		Syetem.out.println(n, start, tmp, end);
	//보조기둥에 있던 n-1개의 접시를 목표기둥으로 옮긴다.
		hanoi(n-1, tmp, start, end);
	
	}
	
}	


2. 하노이탑을 예로 재귀함수의 특징
  : 하노이탑의 경우 총 반복 횟수를 생각보면 2^n-1인데, 이것은 n이 증가할수록 약 2배정도 늘어난다는 말이다.
  이를 재귀함수의 특징으로 빗대어 보면, 재귀함수는 자신 안에서 다시 호출하는 함수이기 때문에, 하노이탑과 같은 문제를 재귀함수로 표현하면시간복잡도가 배로 증가한다. 
  재귀함수는 호출시 스택영역에 스택 메모리를 쌓게 되는데 스택 메모리 크기를 고려하지않고 많은 횟수를 호출시 스택오버플로우라는 오류가 발생할 수 있다.


3. 원판 4개를 A기둥에서 C로 옮길 때(보조 기둥 B) 이동 순서와 총 이동 횟수를 작성
  : 15회
  A B
  A C
  B C
  A B
  C A
  C B
  A B
  A C
  B C
  B A
  C A
  B C
  A B
  A C
  B C